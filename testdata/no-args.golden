      --config string    config file (default is $HOME/.config/generate-secure-pillar/config.yaml)
      --profile string   profile name from profile specified in the config file
      --pubring string   PGP public keyring (default is $HOME/.gnupg/pubring.gpg)
      --secring string   PGP private keyring (default is $HOME/.gnupg/secring.gpg)
      --version          print the version
  -e, --element string   Name of the top level element under which encrypted key/value pairs are kept
  -h, --help             help for generate-secure-pillar
  -k, --pgp_key string   PGP key name, email, or ID to use for encryption
  completion  Generate the autocompletion script for the specified shell
  create      create a new sls file
  decrypt     perform decryption operations
  encrypt     perform encryption operations
  generate-secure-pillar [command]
  help        Help about any command
  keys        show PGP key IDs used
  rotate      decrypt existing files and re-encrypt with a new key
  update      update the value of the given key in the given file
# add to the new file
# create a new sls file
# decrypt a specific existing value (requires imported private key)
# decrypt all files and re-encrypt with given key (requires imported private key)
# encrypt all plain text values in a file
# encrypt all plain text values in a file under the element 'secret_stuff'
# or use --update flag
# recurse through all sls files, decrypting all values (requires imported private key)
# recurse through all sls files, encrypting all values
# show all PGP key IDs used in a file
# show all keys used in all files in a given directory
# show the PGP Key ID used for an element at a path in a file
# specify a config profile and create a new file
# update an existing value
$ generate-secure-pillar --profile dev create --name secret_name1 --value secret_value1 --name secret_name2 --value secret_value2 --outfile new.sls
$ generate-secure-pillar -k "New Salt Master Key" rotate -d /path/to/pillar/secure/stuff
$ generate-secure-pillar -k "Salt Master" --element secret_stuff encrypt all --file us1.sls --outfile us1.sls
$ generate-secure-pillar -k "Salt Master" create --name secret_name1 --value secret_value1 --name secret_name2 --value secret_value2 --outfile new.sls
$ generate-secure-pillar -k "Salt Master" encrypt all --file us1.sls --outfile us1.sls
$ generate-secure-pillar -k "Salt Master" encrypt all --file us1.sls --update
$ generate-secure-pillar -k "Salt Master" encrypt recurse -d /path/to/pillar/secure/stuff
$ generate-secure-pillar -k "Salt Master" update --name new_secret_name --value new_secret_value --file new.sls
$ generate-secure-pillar -k "Salt Master" update --name secret_name --value secret_value3 --file new.sls
$ generate-secure-pillar decrypt path --path "some:yaml:path" --file new.sls
$ generate-secure-pillar decrypt recurse -d /path/to/pillar/secure/stuff
$ generate-secure-pillar keys all --file us1.sls
$ generate-secure-pillar keys path --path "some:yaml:path" --file new.sls
$ generate-secure-pillar keys recurse -d /path/to/pillar/secure/stuff
Available Commands:
Create and update encrypted content or decrypt encrypted content.
Examples:
Flags:
Usage:
Use "generate-secure-pillar [command] --help" for more information about a command.